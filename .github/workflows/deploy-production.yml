# =============================================================================
# Production Deployment with Manual Approval
# =============================================================================
# Requires manual trigger and confirmation
# Deploys to: https://paiss.me
# =============================================================================

name: Deploy to Production

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      confirm:
        description: 'Type "deploy" to confirm production deployment'
        required: true
        default: ''

jobs:
  validate-input:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    steps:
      - name: ‚úÖ Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "deploy" ]; then
            echo "‚ùå Deployment cancelled: confirmation not provided"
            echo "   Please type 'deploy' to confirm"
            exit 1
          fi
          echo "‚úÖ Deployment confirmed"

  deploy-production:
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    needs: validate-input

    environment:
      name: production
      url: https://paiss.me

    steps:
      - name: üîë Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: üìä Pre-Deployment Status
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "üìä Current production status:"
          ssh ${EC2_USER}@${EC2_HOST} 'docker ps --filter "name=paiss-web" --format "{{.Names}}: {{.Status}}"' || echo "No containers running"

      - name: üöÄ Deploy to Production
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          # Create deployment script
          cat > deploy_production.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e

          echo "üöÄ Starting PAISS production deployment..."
          echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT - Extra validation enabled"

          cd /opt/multi-tenant-platform

          # Update platform code
          echo "üì¶ Updating platform code..."
          git pull origin main 2>/dev/null || echo "‚ö†Ô∏è  Using existing platform code"

          # Authenticate to GHCR
          echo "üîë Authenticating to GitHub Container Registry..."
          echo "$GHCR_TOKEN" | docker login ghcr.io -u duersjefen --password-stdin

          # Create production env file
          echo "üìù Creating environment configuration..."
          cat > configs/paiss/.env.production << EOF
          # PAISS Production Environment
          ENVIRONMENT=production
          IMAGE=ghcr.io/duersjefen/paiss:latest
          EOF

          chmod 600 configs/paiss/.env.production

          # Check disk space
          echo "üîç Checking disk space..."
          DISK_AVAIL=$(df -h /opt | tail -1 | awk '{print $4}' | sed 's/G//')
          if (( $(echo "$DISK_AVAIL < 5" | bc -l) )); then
            echo "‚ùå Insufficient disk space: ${DISK_AVAIL}G available (need 5G)"
            exit 1
          fi
          echo "‚úÖ Sufficient disk space: ${DISK_AVAIL}G available"

          # Deploy to production
          echo "üö¢ Deploying PAISS to production..."
          PLATFORM_ROOT=/opt/multi-tenant-platform \
          ENVIRONMENT=production \
          ./lib/deploy.sh paiss production

          # Extended verification for production
          echo "üîç Running production verification..."
          sleep 15

          # Health check with retries
          MAX_RETRIES=6
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if docker exec paiss-web curl -f http://localhost/health 2>/dev/null; then
              echo "‚úÖ PAISS is healthy"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "‚ùå Health check failed after $MAX_RETRIES attempts"
                exit 1
              fi
              echo "‚è≥ Waiting for PAISS... (attempt $RETRY_COUNT/$MAX_RETRIES)"
              sleep 10
            fi
          done

          echo "‚úÖ Production deployment complete!"
          echo "üåê Application is live at https://paiss.me"
          DEPLOY_SCRIPT

          # Execute on EC2
          scp -o StrictHostKeyChecking=no deploy_production.sh ${EC2_USER}@${EC2_HOST}:/tmp/
          ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} \
            "GHCR_TOKEN='${{ secrets.GHCR_TOKEN }}' bash /tmp/deploy_production.sh"

      - name: üß™ Run Post-Deployment Tests
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "üß™ Running production smoke tests..."

          # Test health endpoint
          ssh ${EC2_USER}@${EC2_HOST} \
            'docker exec paiss-web curl -f http://localhost/health' || exit 1

          # Check container status
          ssh ${EC2_USER}@${EC2_HOST} \
            'docker ps --filter "name=paiss-web" --format "{{.Status}}" | grep -q "Up"' || exit 1

          echo "‚úÖ All production smoke tests passed"

      - name: üìä Post-Deployment Status
        if: success()
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "üìä Production deployment status:"
          ssh ${EC2_USER}@${EC2_HOST} 'docker ps --filter "name=paiss" --format "table {{.Names}}\t{{.Status}}\t{{.Size}}"'

      - name: üì¢ Deployment Success
        if: success()
        run: |
          echo "### ‚úÖ PRODUCTION DEPLOYMENT SUCCESSFUL!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üåê **URL:** https://paiss.me" >> $GITHUB_STEP_SUMMARY
          echo "üìù **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "üë§ **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "üïí **Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Monitor at:** https://monitoring.paiss.me" >> $GITHUB_STEP_SUMMARY

      - name: üîÑ Rollback on Failure
        if: failure()
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "‚ùå PRODUCTION DEPLOYMENT FAILED!"
          echo "üîÑ Initiating automatic rollback..."

          ssh ${EC2_USER}@${EC2_HOST} \
            'cd /opt/multi-tenant-platform && ./lib/rollback.sh paiss production' || {
              echo "‚ùå Rollback script failed!"
              echo "‚ö†Ô∏è  MANUAL INTERVENTION REQUIRED"
              exit 1
            }

          echo "‚úÖ Rollback completed successfully"
          exit 1
